= Programming Bitcoin
:imagesdir: images

[[chapter_elliptic_curves]]
== Elliptic Curves

[.lead]
In this chapter we're going to learn the other higher-level math component that we need and that's Elliptic Curves. We'll be combining Elliptic Curves with Finite Fields in Chapter 3, but for now, we will be looking at what Elliptic Curves are in general first.

As in the previous chapter, elliptic curves can look intimidating if you haven't seen them before. Also as in the previous chapter, the actual math isn't very difficult. Most of Elliptic Curves could have been taught to you around the second year of High School. In this chapter, we'll get to what these curves are and what we can do with them.

=== Definition

Elliptic Curves are really just like many equations you've been seeing since around 8th grade. They have y on one side and x on the other in some form. They specifically have a form like this:

y^2^=x^3^+ax+b

This is probably somewhat familiar as you've worked with other equations that look similar. For example, you are probably learned the linear equation back in middle school:

y = mx + b

You may even remember that *m* here has the name _slope_ and *b*, _y-intercept_. You can also graph linear equations like this:

image::linear.png[Linear Equation]

Similarly, you're probably familiar with the quadratic equation and its graph:

y = ax^2^+bx+c

image::quadratic.png[Quadratic Equation]

And sometime in high school, you did even higher orders on x, something called the cubic equation and its graph:

y = ax^3^+bx^2^+cx+d

image::cubic.png[Cubic Equation]

An elliptic curve isn't all that different. The only real difference between the elliptic curve and the cubic curve above is the *y^2^* term on the right side. This has the effect of making the graph symmetric over the x-axis like so:

image::elliptic2.png[Elliptic Curve Equation]

You may also have noticed that the elliptic curve is less steep than the cubic curve. Again, this is because of the *y^2^* term on the right. At times, the curve may even be disjoint like this:

image::elliptic1.png[Elliptic Curve Equation]

If it helps, an elliptic curve is more or less made by taking a cubic equation graph, taking only the part above the x-axis, flattening it out and then mirroring the top half on the bottom half of the x-axis.

image::process1.png[Start]
image::process2.png[Stretch]
image::process3.png[Symmetric]

Specifically, the elliptic curve used in Bitcoin is called secp256k1 and it uses this particular equation:

y^2^=x^3^+7

The canonical form is y^2^=x^3^+ax+b so you can also think of the curve as being `a=0`, `b=7`. The curve looks like this:

image::elliptic3.png[secp256k1 Curve]

=== Coding Elliptic Curves in Python

For a variety of reasons which will be clear later, we are not interested in the curve itself, but specific points on the curve. For example, in the curve y^2^=x^3^+5x+7, we are interested in the coordinate (-1,1). We are thus going to define the class `Point` to be the actual point on a specific curve. The curve has a specifc form, y^2^=x^3^+ax+b so we can define the curve with just the two numbers *a* and *b*.

[source,python]
----
class Point:

    def __init__(self, x, y, a, b):
        self.a = a
        self.b = b
        self.x = x
        self.y = y
        if self.y**2 != self.x**3+self.a*self.x + self.b: # <1>
	    raise ValueError('Point ({},{}) is not on the curve'.format(x,y))

    def __eq__(self, other): # <2>
        return self.a == other.a and self.b == other.b and self.x == other.x and self.y == other.y

----
<1> We check here that the point is actually on the curve.
<2> Points are equal iff they are on the same curve and have the same coordinates

This allows us to do something like this:

[source, python]
----
>>> from ecc import Point
>>> p1 = Point(-1, -1, 5, 7)
>>> p2 = Point(-1, -2, 5, 7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "ecc.py", line 143, in __init__
    raise ValueError('({}, {}) is not on the curve'.format(self.x, self.y))
ValueError: (-1, -2) is not on the curve
----

We want the $$__init__$$ method to throw an error when the point is actually not on the curve.

==== Exercise {counter:exercise}

Determine which of these points are on the curve y^2^=x^3^+5x+7:

(2,4), (1,-1), (18,77), (5,7)


==== Exercise {counter:exercise}

Write the $$__ne__$$ method for `Point`.

=== Point Addition

The main reason that Elliptic Curves are useful is because of something called Point Addition. 

It turns out that for every elliptic curve, a line will intersect at either 1 or 3 points.

image::intersect1.png[Line intersecting at 1 point]
image::intersect3.png[Line intersecting at 3 points]

The two exceptions are when a line is _tangent_ to the curve and when a line is exactly vertical.

image::intersect2-1.png[Vertical Line]
image::intersect2-2.png[Tangent Line]

We will come back to these two cases later.

What's interesting is that we can define something called *point addition* using this fact. Like with Field Addition, we define point addition ourselves. In our case, point addition is defined this way:

For any two points P~1~=(x~1~,y~1~) and P~2~=(x~2~,y~2~), we get P~1~+P~2~ by:

* Find the point intersects the elliptic curve a third time by drawing a line through P~1~ and P~2~
* Reflect the resulting point over the x-axis

Visually, it looks something like this:

image::pointaddition.png[Point Addition]

As you can see, point addition is not easily predictable. We can calculate point addition easily enough with a formula, but intuitively, the result of point addition can be almost anywhere given two points on the curve. That is, point addition is non-linear.

=== Math of Point Addition

The reason why we have "addition" in the Point Addition name is that Point Addition satisfies certain properties that we think of as addition. Specifically, addition has these properties:

* Identity
* Commutativity
* Associativity
* Invertibiltiy

Identity here means that there's a zero. That is, there exists some point (I) which when added to a point (P) results in P. We'll call this point the point at infinity (reasons for this will become clear in a bit). That is:

I + P = P

This is also related to invertibility. For some point P, there's some other point -P which results in the Identity point. That is:

P + (-P) = I

Visually, these are points opposite each other in the elliptic curve.

image::intersect2-1.png[Vertical Line]

This is why we call this point the point at infinity. We have one extra point in the elliptic curve which makes the vertical line intersect a third time.

Commutativity means that P+Q=Q+P. This is obvious since the line going through P and Q will intersect the curve a third time in the same place no matter what order.

Associativity means that (P+Q) + R=P + (Q+R). This isn't obvious and is the reason for flipping over the x-axis.

image::associativity1.png[Case 1]
image::associativity2.png[Case 2]

You can see that in both cases, the final point is exactly the same. While this doesn't prove the associativity of Point addition, the visual should at least give you the intuition that this is true.

To actually do the Point Addition, we're going to split it up into 3 steps:

1. Where the points are in a vertical line or using the Identity.
2. Where the points are not in a vertical line, but are different.
3. Where the two points are the same.

=== Coding Point Addition

We first handle the identity, or the point at infinity. Since we don't have the infinity numbers in Python, we'll use the `None` value instead. What we want is something like this:

[source, python]
----
>>> from ecc import Point
>>> p1 = Point(-1, -1, 5, 7)
>>> p2 = Point(-1, 1, 5, 7)
>>> inf = Point(None, None, 5, 7)
>>> p1 + p2
Point(infinity)
>>> p1 + inf
Point(-1, -1)
>>> inf + p2
Point(-1, 1)
----

In order to make this work, we have to do two things:

First, we have to adjust the $$__init__$$ method slightly so it doesn't check that the curve equation is satisfied. Second, we have to overload the addition operator or $$__add__$$ as we did with the FieldElement class.

[source,python]
----
class Point:

    def __init__(self, x, y, a, b):
        self.a = a
        self.b = b
        self.x = x
        self.y = y
	if self.x is None and self.y is None: <1>
	    return
        if self.y**2 != self.x**3 + self.a*self.x + self.b:
	    raise ValueError('Point ({},{}) is not on the curve'.format(x,y))
    

    def __add__(self, other): # <2>
        if self.a != other.a or self.b != other.b:
            raise RuntimeError('Points {}, {} are not on the same curve'.format(self, other))

    	if self.x is None: # <3>
	    return other
	if other.x is None: # <4>
	    return self
----
<1> x-coordinate and y-coordinate being `None` is how we signify the point at infinity. Note that the next if statement will fail if we don't return here.
<2> We overload the `+` operator here
<3> `self.x` being `None` means that `self` is the point at infinity, or the additive identity. Thus, we return `other`
<4> `self.x` being `None` means that `other` is the point at infinity, or the additive identity. Thus, we return `self`


==== Exercise {counter:exercise}

Handle the case where the two points are negatives of each other. That is, they have the same x, but a different y, causing a vertical line. This should return the point at infinity.

=== Point Addition for when x~1~â‰ x~2~

When we have points where the x's differ, we can add using a fairly simple formula. To help with intuition, it helps first to find the slope created by the two points. You can figure this out using a formula you probably learned in middle school:

P~1~=(x~1~,y~1~), P~2~=(x~2~,y~2~), P~3~=(x~3~,y~3~)

P~1~+P~2~=P~3~

s=(y~2~-y~1~)/(x~2~-x~1~)

This is the slope and we can figure out where the x~3~ intersection is. Once we know that, we can calculate y~3~. P~3~ can thus be derived using this formula:

x~3~=s^2^-x~1~-x~2~

y~3~=s(x~1~-x~3~)-y~1~

Remember that y~3~ is the reflection over the x-axis.

.Deriving The Point Addition Formula
****

Supposing:

P~1~=(x~1~,y~1~), P~2~=(x~2~,y~2~), P~3~=(x~3~,y~3~)

P~1~ + P~2~ = P~3~

We want to know what P~3~ is.

Let's start with the fact that the line that goes through P~1~ and P~2~ looks like this:

s=(y~2~-y~1~)/(x~2~-x~1~)

y=s(x-x~1~)+y~1~

The second formula here is the equation of the line that intersects at both P~1~ and P~2~. Now using this formula and plugging it into the elliptic curve equation, we get:

y^2^=x^3^+ax+b

y^2^=(s(x-x~1~)+y~1~)^2^=x^3^+ax+b

Gathering all the terms, we have this polynomial equation:

x^3^-s^2^x^2^+(a+2s^2^x~1~-2sy~1~)x+b-(sx~1~-y~1~)^2^=0

We also know that x~1~, x~2~ and x~3~ are solutions to this equation, thus:

(x-x~1~)(x-x~2~)(x-x~3~)=0

x^3^-(x~1~+x~2~+x~3~)x^2^ +(x~1~x~2~+x~1~x~3~+x~2~x~3~)x-x~1~x~2~x~3~=0

From above, we know that:

x^3^-s^2^x^2^+(a+2s^2^x~1~-2sy~1~)x+b-(sx~1~-y~1~)^2^=0

There's a result from called the Theorem on the Equality of Polynomials, which states that the coefficients have to equal each other if the roots are the same. The first one that's interesting is the coefficient in front of x^2^:

s^2^=x~1~+x~2~+x~3~

We can use this to derive the formula for x~3~:

x~3~=s^2^-x~1~-x~2~

We can plug this in to the formula for the line above:

y=s(x-x~1~)+y~1~

But we have to reflect over the x-axis, so this has to be negated:

y~3~=-(s(x-x~1~)+y~1~)=s(x~1~-x~3~)-y~1~

That's how we arrive at this formula.
****

==== Exercise {counter:exercise}

For the curve y^2^=x^3^+5x+7, what is (2,5) + (-1,-1)?

=== Coding Point Addition for when x~1~â‰ x~2~

We now have to actually code this into our library. That means we have to adjust the $$__add__$$ method to handle the case where x~1~â‰ x~2~. We have the formulas:

s=(y~2~-y~1~)/(x~2~-x~1~)

x~3~=s^2^-x~1~-x~2~

y~3~=s(x~1~-x~3~)-y~1~

Now we have to return an instance of the class `Point` that corresponds to this.

==== Exercise {counter:exercise}

Write the $$__add__$$ method where x~1~â‰ x~2~

=== Point Addition for when P~1~=P~2~

When the x coordinates are the same and the y coordinate is different, we have the situation where the points are opposite each other over the x-axis. We know that this means:

P~1~=-P~2~ or P~1~+P~2~=I

We've already handled this above.

What happens when P~1~=P~2~? Visually, we have to calculate the line that's *tangent* to the curve at P~1~ and find the point at which the line intersects the curve. The situation looks like this as we saw before:

image::intersect2-2.png[Tangent Line]

Once again, we'll have to find the slope of the tangent point.

P~1~=(x~1~,y~1~), P~3~=(x~3~,y~3~)

P~1~+P~1~=P~3~

s=(3x~1~^2^+a)/(2y~1~)

The rest of the formula goes through as before, except x~1~=x~2~, so we can combine them:

x~3~=s^2^-2x~1~

y~3~=s(x~1~-x~3~)-y~1~


.Deriving the Tangent LIne
****
We can derive the slope of the tangent line using some slightly more advanced math: calculus. We know that the slope at a given point is

dy/dx

To get this, we need to take the derivative of both sides of the elliptic curve equation:

y^2^=x^3^+ax+b

Taking the derivative we get:

2y dy=(3x^2^+a) dx

Solving for dy/dx, we get:

dy/dx=(3x^2^+a)/(2y)

That's how we arrive at the slope formula. The rest of the results from the point addition formula derivation hold.
****

==== Exercise {counter:exercise}

For the curve y^2^=x^3^+5x+7, what is (-1,1) + (-1,1)?

=== Coding Point Addition for when P~1~=P~2~

Once again, we have to adjust the $$__add__$$ method to account for this particular case. We have the formulas, we now have to implement them.

s=(3x~1~^2^+a)/(2y~1~)

x~3~=s^2^-2x~1~

y~3~=s(x~1~-x~3~)-y~1~


==== Exercise {counter:exercise}

Write the $$__add__$$ method where x~1~=x~2~ and y~1~=y~2~

=== Coding One More Exception

There is one more exception and this involves the case where the tangent line is vertical:

image::tangentvertical.png[Tangent Vertical]

This can only happen if P~1~=P~2~ and the y-coordinate is 0, in which case the slope calculation will end up with a 0 in the denominator.

We can handle this using a special case:

[source,python]
----
class Point:

    zero = 0 # <1>

    ...

    def __add__(self, other):
    	...
	if self == other and self.y == self.zero: # <2>
	    return self.__class__(None, None, self.a, self.b) # <3>
----
<1> For reasons which will become clear in the next chapter, we need to define zero specific to the class.
<2> If the two points are equal and the y coordinate is zero, we return the point at infinity.
<3> This is how we create a point at infinity

=== Conclusion

We've covered what Elliptic Curves are, how they work and how to do point addition on them. We now combine the concepts from Chapters 1 and 2 to build Elliptic Curve Cryptography