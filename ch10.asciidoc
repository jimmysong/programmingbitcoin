= Programming Bitcoin
:imagesdir: images

[[chapter_spv]]


## Simplified Payment Verification

The one field that we didn't investigate much in the last chapter is the Merkle Root field. The reason is that in order to understand why it's useful, we have to learn a few things about what Merkle Trees are and what properties they have. In this chapter, we're going to learn exactly what a Merkle Root is. This will be motivated by something called a Proof of Inclusion.

### Motivation

For a device that doesn't have much hard drive space, like your phone, it's hard to store the entire blockchain. As of this writing, the entire Bitcoin blockchain is around 161.5GB, which is a lot more than many phones can handle. If the entire blockchain cannot be put on the phone, what else can we do? Is it possible to create a Bitcoin wallet on a phone without having all the data?

There are two scenarios that we're concerned with. Paying someone and getting paid.

If you are paying someone with your Bitcoin wallet, it is up to the person receiving your Bitcoins to verify that indeed, they've received it. Once they've verified that the transaction has been included in a block, they'll give you the good or service you are expecting in return. Once you've sent the transaction to the other party, there really isn't anything for you to do than wait.

When getting paid Bitcoins, however, we have a dilemma. If we are connected and have the full blockchain, we don't need to worry as we can observe that the transaction paying us is in a sufficiently buried block at which point we'd give them our goods or services. If we don't have the full blockchain, as with a phone, what can we do?

It turns out that the answer lies in the Merkle Root field. We can get just the block headers and get proof that a particular transaction is in a block that we know about. Since the block is secured by proof-of-work, we know that a proof of inclusion in that block is sufficient. The rest of this chapter goes into what the proof of inclusion looks like and how we both construct it and verify it.

A Merkle Tree is a computer science structure designed for efficient proofs of inclusion. The prerequisite is an ordered list of things, in our case, transactions, and a hash function, in our case, double-sha256. What we do is this:

1. Hash all the items of the ordered list with the provided hash function
2. If there is exactly 1 hash, we are done
3. If there is an odd number of hashes, we add a copy of the last hash in the list to the end so that we have two of the same ones.
4. We pair the hashes in order and hash the concatenation to get the parent level.
5. Go to 2.

The idea is to come to a single hash that represents all of the hashes. We'll go through each thing we need below.

TODO Diagram for Merkle Tree

### Merkle Parent

Given two hashes, we need some way to produce another hash that represents both of them. As they are ordered, we will call the two hashes the *left* hash and the *right* hash. The combination, we call the *parent* hash. The formula for getting the parent is pretty simple:

H = Hashing function, P = Parent Hash, L = Left Hash, R = Right Hash

P=H(L||R)

TODO Code for this
TODO Exercise for this

At this point, it's important to note that we can show that either the left or right hash is a "part" of the parent by revealing the other hash. That is, if we want to know that L is a part of P, someone can prove this is so, by revealing R and the fact that we're the left hash. We can combine L and R in the same way to produce P. This would prove that L and R are part of P.

### Merkle Parent Level

Given an ordered list of more than two hashes, we can calculate an entire list of parents, or what we call the Merkle Parent Level. If we have an even number of hashes, this is straightforward, as we can simply pair them up in order. If we have an odd number of hashes, then we need to do something else as we have a lone hash at the end.

The Merkle Tree solution is to simply duplicate the last item. So, for a list like [A, B, C] what we do is add C again to get [A, B, C, C]. At this point, we can calculate the merkle parent of A and B and calculate the merkle parent of C and C to get:

[H(A||B), H(C||C)]

Note that since the Merkle Parent always consists of two hashes, we end up with exactly half the number of hashes before, rounded up. The rounding up is because an odd number of hashes is expanded to be one more.

TODO Code for this
TODO Exercise for this

### Merkle Root

The process of getting the Merkle Root is to simply calculate the Merkle Parent Level until we get a single hash. The final hash is called the Merkle Root.

TODO Code for this
TODO Exercise for this

### Merkle Root in Blocks

The way we calculate the merkle root in Blocks may seem pretty straightforward, but due to endian-ness issues, this turns out to be a bit counterintuitive. Specifically, we have to calculate the hash of a transaction and use the little-endian ordering as the leaves for the Merkle Tree. After we calculate the Merkle Root, we have to again interpret that in little-endian in order to compare against the Merkle Root stored in the block.

In practice, this simply means reversing the hash at the bottom and reversing the hash at the top.

TODO Code for this
TODO Exercise for this

### Merkle Proofs

TODO Diagram for a Merkle Proof

Once we have a Merkle Tree as a server, we can now send Merkle Proofs. Merkle Proofs prove that the transaction is inside the Merkle Tree represented by the Merkle Root. This is similar to proving that a hash is a part of a Merkle Parent by revealing its sibling and indeed we will be utilizing that property. Recall that in proving that a hash is a part of a Merkle parent, we need to specify whether our hash is the left or right one and also the other hash. A Merkle Proof is essentially proving this at each level.

### Merkle Path

To begin, let's examine the Merkle Path which can be seen in the diagram as all the ancestors of the transaction in question. If we are given all the siblings and whether we're on the left or the right at each level, we would have enough data to reconstruct the Merkle Root. Then we can examine if the root we've calculated matches the root that we know about in the block. If the two match, we have a proof of inclusion.

It turns out that to know whether we're on the left or right requires that we just know the transaction's position at the very bottom layer. In our diagram, the 0-based index of our transaction at the bottom layer (or layer 0) is 10. The index at layer 1 is 5. The index at layer 2 is 2, The index at layer 3 is 1 and the index at layer 4 is 0 since that's the Merkle Root. The formula for finding the index at the next layer looks like this:

index~layer n+1~=floor(index~layer n~/2)

This makes sense since the number of items in the parent layer is half that of the current layer.

TODO Code for this
TODO Exercise for this

### Merkle Proof Construction

To actually construct the proof, we need the index at layer 0 and all the sibling indexes.

TODO Code for this
TODO Exercise for this

### Merkle Proof Verification

Once we receive the Merkle Proof from the server, we can now combine the information to verify that the transaction was indeed included in the block.

TODO Code for this
TODO Exercise for this

### SPV Problems

It should be obvious at this point why Simplified Payment Verification is useful. However, SPV is not without some significant downsides. The full details are outside the scope of this book, but note that despite the programming being pretty straightforward, most wallets on phones actually do not use SPV, but simply trust nodes from the wallet vendors.

TODO Bloom filters?