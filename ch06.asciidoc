= Programming Bitcoin
:imagesdir: images

[[chapter_script]]

== Script

[.lead]
The ability to lock and unlock coins is the mechanism by which we transfer Bitcoin. Locking is leaving some Bitcoins to someone else. Unlocking is spending some Bitcoins that have been left for you.

In this chapter we examine this locking/unlocking mechanism, which is often called a smart contract. Script is what allows the elliptic curve cryptography (Chapter 3) to be evaluated within the transaction (Chapter 5). Script is the glue that makes transactions work with digital signatures. Script essentially allows people to be able to prove that they have the right to spend certain outputs. We're getting a little ahead of ourselves, though, so let's start with how Script works and go from there.

=== Mechanics of Script

If you are confused about what a "smart contract" is, don't worry. "Smart contract" is a fancy way of saying "programmable" and the "smart contract language" is simply a programming language. In Bitcoin, Script is the smart contract langauge, or the programming language used to express the conditions under which bitcoins are spendable.

Bitcoin has the digital equivalent of a contract in Script. Script is an intentionally limited programming language in the sense that it doesn't have certain features. Specifically, it does not have any mechanism for loops and is therefore not Turing complete.

[NOTE]
.Why Bitcoin isn't Turing Complete
====
Turing completeness in a programming language essentially means that you have the ability to do loops. Loops are a useful construct in programming, so you may be wondering at this point why Script doesn't allow for loops.

There are a lot of reasons for this, but let's start with program execution. Anyone can create a Script program that every full node on the network executes this program. If Script were Turing Complete, it's possible for the loop to go on executing forever. This would essentially cause every full node to enter and never leave that loop and would thus be an easy way to attack the network through what would be called a Denial of Service attack (DoS). A single script that has an infinite loop could take down Bitcoin! This would not be good, for obvious reasons and would be a large systematic vulnerabilty. Ethereum, which has Turing Completeness in its smart contract language, Solidity, handles this problem by forcing contracts to pay for program execution with something called "gas". An infinite loop will exhaust whatever gas is in the contract as by definition, it will run an infinite number of times.

There are other reasons to avoid Turing Completeness and that's because smart contracts with Turing completeness are very difficult to analyze. A Turing Complete smart contract's execution conditions are very difficult to enumerate and thus easy to create behavior that's unintended, causing bugs. Bugs in a smart contract mean that it's vulnerable to being unintentionally spent, which means the contract writer would lose money. This is not just theoretical, this was the major problem in the DAO which caused the Ethereum Classic hard fork.
====

What you are required to do as part of a transaction is to assign Bitcoins to a *locking* Script. The locking Script is what's specified in ScriptPubKey (see chapter 5). Think of this as the lock box where some money is deposited which only a particular key can open. The money inside, of course, can only be accessed by someone with that key.

The actual unlocking of bitcoin is done in the ScriptSig field (see chapter 5) and proves ownership of the locked box in order to spend the funds.

=== How Script works

Script, as a language, operates by processing one instruction at a time. There are two possible types of instructions: elements and operations.

Elements are just data. They are byte strings of length 1 to 520. A typical element might be a der signature or a sec pubkey.

.Elements
image::script1.png[Script Elements]

Operations do something to the data. They consume zero or more elements from the processing stack and put zero or more elements back on the stack.

.Operations
image::script2.png[Script Operations]

A typical operation might be something like OP_DUP, which will duplicate the top element (consuming 0) and putting a new element on top (putting 1).

.OP_DUP duplicates the top element
image::op_dup.png[OP_DUP]

At the end of evaluating all the instructions, the top element of the stack must be non-zero for the Script to execute successfully. Having no elements on the stack or having the top element be zero would result in a failed execution. Failed execution generally means that the transaction which includes the unlocking Script is invalid and not accepted on the network.

=== Example Operations

There are many other operations besides OP_DUP. OP_HASH160 does a sha256 followed by a ripemd160 to the top element of the stack (consuming 1) and putting a new element back (putting 1). Note in the diagram that y = ripemd160(sha256(x)).

.OP_HASH160 does a SHA256 followed by RIPEMD160 to the top element
image::op_hash160.png[OP_HASH160]

Another very important operation is OP_CHECKSIG. OP_CHECKSIG consumes 2 elements from the stack, the first being the pubkey, the second being a signature, and examines if the signature is good for the given pubkey. If so, OP_CHECKSIG pushes a 1 onto the stack, otherwise puts a 0 on the stack.

.OP_CHECKSIG checks if the signature for the pubkey is valid or not
image::op_checksig.png[OP_CHECKSIG]

==== Coding opcodes

Given this, we can now code OP_DUP. This opcode simply duplicates the top element of the stack.

[source,python]
----
def op_dup(stack):
    if len(stack) < 1:  ## <1>
        return False
    stack.append(stack[-1])  ## <2>
    return True
----
<1> We have to have at least one element to duplicate, otherwise, we can't execute this opcode.
<2> This is how we duplicate the top element of the stack.

Note that we return a boolean with this opcode, as a way to tell whether the operation was successful. A failed operation automatically fails Script evaluation.

Here's another one for OP_HASH256. This opcode will consume the top element, perform a hash256 operation on it and put the result on the stack.

[source,python]
----
def op_hash256(stack):
    if len(stack) < 1:
        return False
    element = stack.pop()
    stack.append(hash256(element))
    return True
----

==== Exercise {counter:exercise}

Write the `op_hash160` function.

=== Parsing the script fields

Both ScriptPubKey and ScriptSig are parsed the same way. If the byte is between 0x01 and 0x4b (which we call n), we read the next n bytes as an element. Otherwise, the byte represents an operation, which we have to look up. Here are some operations and their byte codes:

* 0x00 - OP_0
* 0x51 - OP_1
* 0x60 - OP_16
* 0x75 - OP_DUP
* 0x93 - OP_ADD
* 0xa9 - OP_HASH160
* 0xac - OP_CHECKSIG

[NOTE]
.Longer than 75-byte elements
====
You might be wondering what would happen if you had an element that's greater than 0x4b (75 in decimal). There are specific 3 specific OP codes for this, namely, OP_PUSHDATA1, OP_PUSHDATA2 and OP_PUSHDATA4. OP_PUSHDATA1 means that the next byte contains how many bytes we need to read for the element. OP_PUSHDATA2 means that the next 2 bytes contain how many bytes we need to read for the element. OP_PUSHDATA4 means that the next 4 bytes contain how many bytes we need to read for the element.

Practically speaking, this means if we have an element that's between 76 and 255 bytes inclusive, we use OP_PUSHDATA1, length of the element, element. For anything between 256 bytes and 520 bytes inclusive, we use OP_PUSHDATA2. Anything larger than 520 bytes is actually not allowed by consensus, so OP_PUSHDATA4 is unnecessary.
====

There are many more opcodes, which are coded in `op.py` and the full list can be found at http://wiki.bitcoin.it.

==== Coding a Script parser and serializer

Now that we know how Script is supposed to work, we can write a Script parser.

[source,python]
----
class Script:

    def __init__(self, instructions):
        self.instructions = instructions  ## <1>

...

    @classmethod
    def parse(cls, s):
        length = read_varint(s)  ## <2>
        instructions = []
        count = 0
        while count < length:  ## <3>
            current = s.read(1)  ## <4>
            count += 1
            current_byte = current[0]  ## <5>
            if current_byte >= 1 and current_byte <= 75:  ## <6>
                n = current_byte
                instructions.append(s.read(n))
                count += n
            elif current_byte == 76:  ## <7>
                data_length = little_endian_to_int(s.read(1))
                instructions.append(s.read(data_length))
                count += data_length + 1
            elif current_byte == 77:  ## <8>
                data_length = little_endian_to_int(s.read(2))
                instructions.append(s.read(data_length))
                count += data_length + 2
            else:  ## <9>
                op_code = current_byte
                instructions.append(op_code)
        if count != length:  ## <10>
            raise SyntaxError('parsing script failed')
        return cls(instructions)
----
<1> Each instruction is either an opcode to be executed or an element to be pushed onto the stack.
<2> We get the length of the entire script.
<3> We need to go until the right amount of bytes are consumed
<4> The byte determines if we have an opcode or element
<5> This converts the byte into an integer in Python
<6> For a number between 1 to 75, we know the next n bytes are an element
<7> 76 is OP_PUSHDATA1, so the next byte tells us how many bytes to read
<8> 77 is OP_PUSHDATA2, so the next two bytes tell us how many bytes to read
<9> We have an opcode that we store.
<10> Script should have consumed exactly the length of bytes we expected, otherwise we raise an error.

We can similarly write a Script serializer.

[source,python]
----
class Script:
...
    def raw_serialize(self):
        result = b''
        for instruction in self.instructions:
            if type(instruction) == int:  ## <1>
                result += int_to_little_endian(instruction, 1)
            else:
                length = len(instruction)
                if length < 75:  ## <2>
                    result += int_to_little_endian(length, 1)
                elif length > 75 and length < 0x100:  ## <3>
                    result += int_to_little_endian(76, 1)
                    result += int_to_little_endian(length, 1)
                elif length >= 0x100 and length <= 520:  ## <4>
                    result += int_to_little_endian(77, 1)
                    result += int_to_little_endian(length, 2)
                else:  ## <5>
                    raise ValueError('too long an instruction')
                result += instruction
        return result

    def serialize(self):
        result = self.raw_serialize()
        total = len(result)
        return encode_varint(total) + result  ## <6>
----
<1> If the instruction is an integer, we know that's an opcode.
<2> If the byte is between 1 and 75 inclusive, we just encode the length as a single byte
<3> For anything from 75 to 255, we put OP_PUSHDATA1 first, and then encode the length as a single byte
<4> For anything from 256 to 520, we put OP_PUSHDATA2 first, and then encode the length as two bytes in little endian.
<5> Any element longer than 520 bytes cannot be serialized.
<6> We prepend with the length of the entire script.

Note that both the parser and serializer were used in Chapter 5 for Transaction parsing/serializing. The Script object represents the instruction set that needs to be validated.

=== Combining the script fields

It's important to realize at this point that the lock box (ScriptPubKey) and the unlocking (ScriptSig) are in *different* transactions. Specifically, the lock box is where the bitcoins are received, the unlocking is where the bitcoins are spent. The input in the spending transaction *points to the receiving transaction*. Essentially, we have a situation like this:

.ScriptPubKey and ScriptSig
image::script3.png[ScriptPubKey and ScriptSig]

Since ScriptSig unlocks ScriptPubKey, we need a mechanism by which the two scripts combine. What we do in Bitcoin is take the items from ScriptSig and ScriptPubKey and combine them as above. The items from the ScriptSig go on top of all the items from ScriptPubKey. Each item is processed one at a time until no items are left to be processed or if the script exits early.

==== Coding the combined instruction set

The actual processing requires that we take the ScriptSig and ScriptPubKey, combine them into a single instruction set and evaluate the instructions. In order to do this, we require a way to combine the scripts.

[source,python]
----
class Script:
...
    def __add__(self, other):
        return Script(self.items + other.items)  ## <1>
----
<1> We are combining the instruction set to create a new Script object.

We will utilize this for Script evaluation later on.

=== Stardard Scripts

There are many types of standard scripts in Bitcoin including the following:

* p2pk - Pay-to-pubkey
* p2pkh - Pay-to-pubkey-hash
* p2sh - Pay-to-script-hash
* p2wpkh - Pay-to-witness-pubkey-hash
* p2wsh - Pay-to-witness-script-hash

Addresses are actually compressed ScriptPubKeys. Wallets know how to interpret various address types (p2pkh, p2sh, p2wpkh) and create the appropriate ScriptPubKey. All of the above have a particular type of address format (base58, bech32) so people can pay to them.

To show exactly how all this works, we'll now take a look at the original script pay-to-pubkey (p2pk).

=== p2pk

Pay-to-pubkey (aka p2pk) was used more during the early days of bitcoin. Most coins thought to belong to Satoshi are in p2pk outputs. There are some limitations that we'll discuss below, but let's first focus on how p2pk works.

We learned back in chapter 3 how signing and verification work in ECDSA. Specifically, you need the message (z), the public key (P) and the signature (r,s). The mechanics of p2pk are simply that you send bitcoins to a public key and let the owner of the private key unlock the bitcoins by creating a signature and determine where the bitcoins should go. Effectively, the ScriptPubKey puts those bitcoins under the control of the private key owner.

Specifying where the bitcoins go is the job of the ScriptPubKey. As stated above, this is the lock box that receive the bitcoins. The actual ScriptPubKey looks like this:

.Pay-to-pubkey (p2pk) ScriptPubKey
image::p2pk1.png[P2PK ScriptPubKey]

Note the OP_CHECKSIG, as that will be very important. The ScriptSig is the part that unlocks the received bitcoins. The pubkey can be compressed or uncompressed, though early on in Bitcoin's history when p2pk was more prominent, uncompressed was the only one being used (see Chapter 4).

In the case of p2pk, the ScriptSig is just the signature.

.Pay-to-pubkey (p2pk) ScriptSig
image::p2pk2.png[P2PK ScriptSig]

The scriptPubKey and ScriptSig combine to make an instruction set that looks like this:

.p2pk Combined
image::p2pk3.png[P2PK Combination]

The two columns below are Items of Script and the actual stack. At the end of this processing, the top element in the stack must be non-zero to be considered a valid ScriptSig. The script items are processed one item at a time. We start with the items as combined above:

.p2pk Start
image::p2pk4.png[P2PK Start]

The first item is the signature, which is an element. This is data that goes on our stack.

.p2pk Step 1
image::p2pk5.png[P2PK Step 1]

The second item is the pubkey, which is also an element. This is again, data that goes on our stack.

.p2pk Step 2
image::p2pk6.png[P2PK Step 2]

OP_CHECKSIG consumes 2 stack items (pubkey and signature) and determines if they are valid for this transaction. OP_CHECKSIG will put a 1 back if the signature is valid, 0 if not. Assuming that the signature is valid for this public key, we have this situation:

.p2pk Step 3
image::p2pk7.png[P2PK End 1]

We're finished processing all the items of Script and we've ended with a single item on the stack which is non-zero (1 is definitely not 0). Therefore, this script is valid.

If we were to get an invalid signature, the result from OP_CHECKSIG would be zero, ending our script processing like this:

.p2pk End
image::p2pk8.png[P2PK End 2]

We end with a single item on the stack which is zero. This means the script is invalid and a transaction with this ScriptSig is invalid.

The script will validate if the signature is valid, but fail if the signature is invalid. Essentially, we are in a situation where the ScriptSig will only unlock the ScriptPubKey if the signature is valid for that public key. In other words, only someone with knowledge of the secret can produce a valid ScriptSig.

Incidentally, we can see here why ScriptPubKey got its name. The public key in uncompressed SEC format is the main item in ScriptPubKey in p2pk (the other being a OP_CHECKSIG). Similarly, ScriptSig is named as such because p2pk is a single item which is the DER signature format.

==== Coding Script Evaluation

We now need a way to do what we did above. That is, go through the instruction set and evaluate whether the script resolves to true. What we want to be able to do is something like this:

[source,python]
----
>>> from io import BytesIO
>>> from script import Script
>>> script_pubkey = Script.parse(BytesIO(bytes.fromhex('...')))
>>> script_sig = Script.parse(BytesIO(bytes.fromhex('...')))
>>> combined_script = script_pubkey + script_sig  ## <1>
>>> print(combined_script.evaluate())  ## <2>
True
----
<1> We can do this because of the $$__add__$$ method we created above.
<2> We want to go through the instructions and see if the result is True or not.

Here is the method that we'll use for the *combined* instruction set (combination of ScriptSig of the current transaction and the ScriptPubKey of the previous transaction).

[source,python]
----
from op import OP_CODE_FUNCTIONS, OP_CODE_NAMES
...
class Script:
...
    def evaluate(self, z):
        instructions = self.instructions[:]  ## <1>
        stack = []
        altstack = []
        while len(instructions) > 0:  ## <2>
            instruction = instructions.pop(0)
            if type(instruction) == int:
                operation = OP_CODE_FUNCTIONS[instruction]  ## <3>
                if instruction in (99, 100):  ## <4>
                    if not operation(stack, instructions):
                        print('bad op: {}'.format(OP_CODE_NAMES[instruction]))
                        return False
                elif instruction in (107, 108):  ## <5>
                    if not operation(stack, altstack):
                        print('bad op: {}'.format(OP_CODE_NAMES[instruction]))
                        return False
                elif instruction in (172, 173, 174, 175):  ## <6>
                    if not operation(stack, z):
                        print('bad op: {}'.format(OP_CODE_NAMES[instruction]))
                        return False
                else:
                    if not operation(stack):
                        print('bad op: {}'.format(OP_CODE_NAMES[instruction]))
                        return False
            else:
                stack.append(instruction)  ## <7>
        if len(stack) == 0:
            return False  ## <8>
        if stack.pop() == b'':
            return False  ## <9>
        return True  ## <10>
----
<1> As the instructions list will change, we make a copy
<2> We go until the instructions list is empty
<3> The actual operation is in the OP_CODE_FUNCTIONS array (e.g. op_dup, op_checksig)
<4> 99 and 100 are OP_IF and OP_NOTIF respectively. They require manipulation of the instructions array based on which branch we go towards.
<5> 107 and 108 are OP_TOALTSTACK and OP_FROMALTSTACK respectively. They move stack elements to/from an "alternate" stack, which we call altstack.
<6> 172, 173, 174 and 175 are OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKMULTISIG, and OP_CHECKMULTISIGVERIFY, which all require the signature hash (`z`) from Chapter 3 for signature validation.
<7> If it's not an opcode, it's an element, so we put that on the stack.
<8> If the stack is empty at the end of processing all the instructions, we fail the script by returning `False`.
<9> If the stack's top element is an empty byte string (which is how the stack stores a 0 or False), then we also fail the script by returning `False`.
<10> Any other result means that the script has passed.

[NOTE]
.Stack elements under the hood
====
It may be confusing to note that sometimes the stack elements are numbers like 0 or 1 and other times they're byte-strings like a DER signature or a SEC pubkey. Under the hood, they're all bytes, just that some are interpreted as numbers for certain opcodes. For example, 1 is stored on the stack as the `01` byte, 11 is stored as the `0b` byte and so on. For the integer 0, this is actually *not* stored as the `00` byte, but as the empty byte-string.

More information can be seen in the op.py file with the `encode_num` and `decode_num` functions.
====

==== Exercise {counter:exercise}

Write the `op_checksig` function in op.py

=== Problems with p2pk

Pay-to-pub-key is pretty intuitive in the sense that there is a public key that anyone can send some bitcoins and a signature that can be produced by the owner of the private key to spend that amount. This works well, but there are some problems.

First, the public keys are long. We know from chapter 3 that SECP256K1 public points are 33 bytes in compressed SEC and 65 bytes in uncompressed SEC. Unfortunately, you can't send the 33 or 65 bytes raw very easily. Most character encodings don't render certain byte ranges as they are control characters, newlines or similar. The SEC format is typically rendered instead in hexadecimal, doubling the length (hex encodes 4 bits per character instead of 8). This makes the compressed and uncompressed SEC formats 66 and 130 characters respectively, which is way bigger than most identifiers. To compound this, early Bitcoin transactions didn't use the compressed versions so the hexadecimal addresses were 130 characters each! This is not fun or easy for people to transcribe, much less communicate by voice!

That said, the original use-case for p2pk was for IP-to-IP payments where IP addresses were queried for their public keys, so communicating the public keys were done machine-to-machine, which meant that this wasn't necessarily a problem. Incidentally, this IP-to-IP payment system was phased out as it's not secure and prone to man-in-the-middle attacks.

.Why did Satoshi use the uncompressed SEC format?
****
It seems the uncompressed SEC format doesn't make sense for Bitcoin given that block space is at a premium, so why did Satoshi use it? It turns out that Satoshi was using the OpenSSL library to do the SEC format conversions and the OpenSSL library at the time Satoshi wrote Bitcoin (circa 2008) did not document the compressed format very well.

Only when Pieter Wuille discovered that the compressed SEC format existed in OpenSSL did its use in Bitcoin become more common.
****

Second, because the public keys are long, this causes a more subtle problem. The UTXO set becomes bigger since this large public key has to be kept around and indexed to see if it's spendable. This may require more resources on the part of nodes.

Third, because we're storing the public key in the ScriptPubKey field, it's known to everyone. That means should ECDSA someday be broken, these outputs could be stolen. This is not a very big threat since ECDSA is used in a lot of applications besides Bitcoin and would affect all of those things, too. For example, quantum computing has the potential to reduce the calculation times significantly for RSA and ECDSA, so having something else in addition to protect these outputs would be more secure.

=== Solving the problems with p2pkh

Pay-to-pubkey-hash (p2pkh) has a bunch of advantages over p2pk:

1. The addresses are shorter.
2. It's additionally protected by SHA256 and RIPEMD160.

Addresses are shorter due to the use of the SHA256 and RIPEMD160 hashing algorithms. We utilize both in succession and call that HASH160. The result of HASH160 is 160-bits or 20 bytes, which can be encoded into an address.

The actual result is an address that you may have seen on the Bitcoin network, something that looks like this:

1PMycacnJaSqwwJqjawXBErnLsZ7RkXUAs

This address actually has within it the 20 bytes in hex that look like this:

f54a5851e9372b87810a8e60cdd2e7cfd80b6e31

These 20 bytes are the result of doing a HASH160 operation on this (compressed) SEC public key:

0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352

Given p2pkh is shorter and more secure, p2pk is no longer used much on the network.

=== p2pkh

Pay-to-pubkey-hash was used during early days of bitcoin, though not nearly as much as p2pk.

Once again, the lockbox where the bitcoins go is the job of the ScriptPubKey. The actual ScriptPubKey looks like this:

.Pay-to-pubkey-hash (p2pkh) ScriptPubKey
image::p2pkh1.png[P2PKH ScriptPubKey]

Note that OP_CHECKSIG is still here and OP_HASH160 makes an appearance. Also note that the sec pubkey has disappeared and has been replaced by a 20 byte hash. There is also a new op code that you haven't seen before, OP_EQUALVERIFY.

The ScriptSig, or the unlocking part of the script looks like this:

.Pay-to-pubkey-hash (p2pkh) ScriptSig
image::p2pkh2.png[P2PKH ScriptSig]

As in p2pk, the ScriptSig has the DER signature. Unlike p2pk, however, the ScriptSig now also has the SEC pubkey. In essence, the pubkey has moved from ScriptPubKey to ScriptSig.

The ScriptPubKey and ScriptSig combine to make a processing list of items that need processing that looks like this:

.p2pkh Combined
image::p2pkh3.png[P2PKH Combination]

At this point, the script is processed one item at a time. We start with the items as above.

.p2pkh Start
image::p2pkh4.png[P2PKH Start]

The first two items are elements, so they go straight on the stack.

.p2pkh Step 1
image::p2pkh5.png[P2PKH Step 1]

OP_DUP duplicates the top element, so we end up with this:

.p2pkh Step 2
image::p2pkh6.png[P2PKH Step 2]

OP_HASH160 will take the top element and perform the HASH160 operation on it (sha256 followed by ripemd160), creating a 20-byte hash like so:

.p2pkh Step 3
image::p2pkh7.png[P2PKH Step 3]

The next item on the stack is an element, thus goes straight on the stack.

.p2pkh Step 4
image::p2pkh8.png[P2PKH Step 4]

We are now at OP_EQUALVERIFY. What this op code does is it consumes the top two elements and sees if they're equal. If they are equal, then the script processing proceeds. If they are not equal, the script stops immediately and is considered invalid. We assume here that they're equal, leading to this:

.p2pkh Step 5
image::p2pkh9.png[P2PKH Step 5]

We are now at exactly where we were in during the OP_CHECKSIG part of processing p2pk. Once again, we assume that the signature is valid:

.p2pkh End
image::p2pkh10.png[P2PKH End]

There are two main ways this script can fail. If you provide a public key that does not hash160 to the 20-byte hash in the ScriptPubKey, the script will fail at OP_EQUALVERIFY (Figure 6-22). The other failure condition is if you do provide the right public key, but an invalid signature. That would end the script with a 0 at the end, failing the script.

This is why we call this type of script pay-to-pubkey-*hash*. The ScriptPubKey has the 20-byte *hash160* of the public key and not the public key itself. We are locking Bitcoins to a *hash* of the public key and are responsible for revealing the public key as part of spending the output in our ScriptSig.

The major advantage is that the ScriptPubKey is shorter (just 25 bytes) and a hacker would not only have to solve the Discrete Log problem in ECDSA, but also figure out a way to find pre-images of both RIPEMD160 and SHA256.

=== Scripts can be arbitrarily constructed

Note that scripts can essentially be anything. Script is a smart contract language and you can express the conditions under which the bitcoins can be unlocked in any manner that you wish. The one limitation is that there is nothing that lets you do anything like loops due to the lack of Turing Completeness. Here is an example ScriptPubKey:

.Example ScriptPubKey
image::ex1.png[Example 1 ScriptPubKey]

Here's a ScriptSig that will unlock the above.

.Example ScriptSig
image::ex2.png[Example 1 ScriptSig]

The combination will look like this:

.Example Combined
image::ex3.png[Example 1 Combination]

This is how the script processing will start:

.Example Start
image::ex4.png[Example 1 Start]

OP_4 will put a 4 on the stack

.Example Step 1
image::ex5.png[Example 1 Step 1]

OP_5 will likewise put a 5 on the stack.

.Example Step 2
image::ex6.png[Example 1 Step 2]

OP_ADD will consume the top two items of the stack, add them together and put back the sum.

.Example Step 3
image::ex7.png[Example 1 Step 3]

OP_9 will put a 9 on the stack

.Example Step 4
image::ex8.png[Example 1 Step 4]

OP_EQUAL will consume 2 items and put a 1 back if equal, 0 back if not.

.Example End
image::ex9.png[Example 1 End]

Note that this isn't particularly hard to figure out and requires no signature. As a result, this sort of script is vulnerable to being taken by pretty much anyone. Think of this as a lock box with a very flimsy lock that anyone can break into. It turns out that most transactions have some signature component in them as a script without some signature component is very easily stolen.

Of course, after it's been spent, included in a block and thus secured by proof-of-work, these coins are no longer as easily spendable. They would have to reverse proof-of-work, which is expensive (Chapter 9).

==== Exercise {counter:exercise}

Create a ScriptSig that can unlock this ScriptPubKey. Note OP_MUL multiplies the top two elements of the stack.

.Exercise 3
image::exercise1.png[Exercise 3]

==== Utilty of Scripts

The previous exercise was a bit of a cheat as OP_MUL is no longer allowed on the Bitcoin network. Version 0.3.5 of Bitcoin disabled a lot of different OP codes as anything that had even a little bit of potential to create vulnerabilties on the network were disabled.

This is just as well since most of the functionality in Script is actually not utilized very much. From a software maintainence standpoint, this is not a great situation as the code has to be maintained despite its lack of usage. This is why Bitcoin is moving more towards simplifying the smart contract language and not expanding it (Scriptless Scripts, for example). Simplifying is a way to make Bitcoin more secure.

This is in stark contrast to other projects which try to expand their smart contract languages, often increasing the attack surface along with the new features.

==== Exercise {counter:exercise}

Figure out what this script is doing:

.Exercise 4
image::exercise2.png[Exercise 4]

==== SHA1 Piñata

In 2013, Peter Todd created a script very similar to the exercise above and put some Bitcoins into it to create an economic incentive for people to find hash collisions. The donations reached 2.49153717 BTC and when Google actually found a hash collision for SHA1 in February of 2017 (https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html), this script was promptly redeemed. The transaction output was 2.48 coins which was $2848.88 USD at the time.

Peter created more piñatas for SHA256, HASH256 and HASH160, which add economic incentives to break these hashing functions.

=== Conclusion

We've covered Script and how it works. We can now proceed to the actual creation and validation of transactions.